{"version":3,"sources":["utils/firebase.js","store/constants/index.js","components/user/Login.js","store/action/user-actions.js","components/questionform/QuestionForm.js","constants/index.js","components/examlist/ExamList.js","store/action/exam-actions.js","components/common/AppHeader.js","components/dotest/DoTest.js","components/common/NotFound.js","components/user/Logout.js","components/app/App.js","serviceWorker.js","store/reducer/exam-reducers.js","store/reducer/user-reducers.js","store/reducer/index.js","store/index.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","data","ref","updateExamWithKey","examKey","editedExam","child","set","JSON","stringify","dataUSer","layout","labelCol","span","wrapperCol","tailLayout","offset","connect","state","user","dispatch","getAllUser","a","once","then","userSnapshot","val","allUser","Object","keys","length","forEach","key","parse","type","setCurrentUser","currentUser","props","useState","wrongMessage","setWrongMessage","redirect","setRedirect","useEffect","fetchUser","to","className","name","initialValues","remember","onFinish","values","users","filter","username","password","currUser","isLogged","console","log","onFinishFailed","errorInfo","Item","label","rules","required","message","Password","style","color","valuePropName","htmlType","Option","Select","DrawerForm","blankQuestion","title","content","answers","Array","correct","explanation","checkValidateQuestion","question","some","x","onChange","e","inputName","target","value","ansIndex","Number","slice","setState","onClose","closeForm","visible","doSaveAndClose","quesNo","questions","mode","nextQuestion","push","prevQuestion","addAnswer","removeAnswer","i","splice","this","show","exam","isEdit","allAnswer","correctAns","gutter","width","addonBefore","placeholder","onClick","DeleteOutlined","DoubleLeftOutlined","DoubleRightOutlined","float","marginRight","bodyStyle","paddingBottom","hideRequiredMark","TextArea","rows","PlusSquareTwoTone","React","Component","Paragraph","Typography","allLevel","OneExam","getEditContent","isAdmin","examTitle","setExamTitle","examDescription","setExamDescription","examLevel","setExamLevel","description","level","levelSelect","disabled","map","l","actions","EditTwoTone","onConfirm","okText","cancelText","avatar","loading","active","Meta","src","preventDefault","editable","str","FormNewExam","setVisible","setTitle","setDescription","setLevel","levelOptions","onCancel","CurrentUserContext","createContext","ExamList","addNewExam","showNewExamForm","onCloseFormQuestion","showQuestionForm","oneExam","res","success","onNewExamClose","undefined","info","remove","removeExamWithKey","initLoading","getAllExam","prevProps","examItem","reverse","questionForm","QuestionForm","newExam","Provider","itemLayout","textAlign","marginTop","height","lineHeight","PlusOutlined","contextType","snapshot","allExam","Text","menu","userInfo","overlay","mark","code","DownOutlined","loginBtn","UserOutlined","onBack","window","history","back","subTitle","Group","OrderedListOutlined","OneQuestion","checkResult","getAnswer","selected","checkedValue","setCheckedValue","answer","no","CheckOutlined","CloseOutlined","examID","setCurrentExam","Promise","resolve","getExamByID","useParams","isDoScore","setIsDoScore","showScore","setShowScore","score","setScore","currentExam","dispQuestion","setDispQuestion","setAnswers","page","setPage","scored","setScored","initDispQues","ans","buffAns","buffScored","tempQuestions","k","total","pageSize","dispQues","quesLen","onShowSizeChange","size","showTotal","trueAns","Boolean","margin","onOk","NotFound","status","extra","setLogout","from","withRouter","exact","path","icon","SmileOutlined","component","DoTest","Login","Logout","location","hostname","match","initialState","isFetching","error","nameInitialState","user_reducer","action","combineReducers","currentQuestions","oneQuestion","userReducer","createStore","appReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8c217d83.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyC_pbuxgg-_MLI2ltEaRDjujcvgXH1gwyY\",\r\n  authDomain: \"aaaaa-580ef.firebaseapp.com\",\r\n  databaseURL: \"https://aaaaa-580ef.firebaseio.com\",\r\n  projectId: \"aaaaa-580ef\",\r\n  storageBucket: \"aaaaa-580ef.appspot.com\",\r\n  messagingSenderId: \"868780603999\",\r\n  appId: \"1:868780603999:web:3eeaf07ebe00853fceb9ea\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst DATABASE = \"app-data/exam\";\r\nconst data = firebase.database().ref(DATABASE);\r\n\r\nexport function getAllExamFromFirebase() {\r\n  return data.once(\"value\").then((snapshot) => {\r\n    // return JSON.parse(snapshot.val());\r\n    return snapshot.val();\r\n  });\r\n}\r\n\r\nexport function addOneExamToFireBase(oneExam){\r\n  return data.push(JSON.stringify(oneExam));\r\n}\r\n\r\nexport function updateExamWithKey(examKey, editedExam) {\r\n  return data.child(examKey).set(JSON.stringify(editedExam));\r\n}\r\n\r\nexport function getExamByID(examID) {\r\n  return new Promise(resolve => {\r\n    data.child(examID).once(\"value\").then(snapshot => {\r\n      resolve(snapshot.val())\r\n    });\r\n  }) \r\n}\r\n\r\nexport function removeExamWithKey(examKey) {\r\n  return data.child(examKey).remove();\r\n}\r\n\r\n// data for user\r\nconst USER_TABLE = \"app-data/user\";\r\nconst dataUSer = firebase.database().ref(USER_TABLE);\r\n\r\nexport function getAllUserFromFirebase() {\r\n  return dataUSer.once(\"value\").then(userSnapshot => {\r\n    return userSnapshot.val();\r\n  })\r\n}\r\n\r\nexport function addUserToFireBase(user) {\r\n  return dataUSer.push(JSON.stringify(user));\r\n}\r\n","/* for exam state */\r\nexport const GET_ALL_EXAM = \"GET_ALL_EXAM\";\r\nexport const ADD_EXAM = \"ADD_EXAM\";\r\nexport const EDIT_EXAM = \"EDIT_EXAM\";\r\nexport const REMOVE_EXAM = \"REMOVE_EXAM\";\r\nexport const FETCH_EXAM_ERROR = \"FETCH_EXAM_ERROR\";\r\nexport const FETCHING_EXAM = \"FETCHING_EXAM\";\r\nexport const ADD_NEW_QUESTION = \"ADD_NEW_QUESTION\";\r\n\r\n/* For user state */\r\nexport const ADD_USER = \"ADD_USER\";\r\nexport const GET_ALL_USER = \"GET_ALL_USER\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\nexport const GET_CURRENT_USER = \"GET_CURRENT_USER\";\r\nexport const REMOVE_CURENT_USER = \"REMOVE_CURENT_USER\";\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { getAllUser, setCurrentUser } from '../../store/action/user-actions';\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport \"./Login.css\"\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 5,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 0,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst Login = (props) => {\r\n\r\n  // const { users } = props.user;\r\n  const [wrongMessage, setWrongMessage] = useState('');\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  useEffect( () => {\r\n    async function fetchUser(){\r\n      await props.getAllUser();  \r\n    }\r\n    fetchUser();\r\n  },[])\r\n\r\n  const onFinish = (values) => {\r\n    // console.log(\"Login: \", {values});\r\n    // authentication validate     \r\n    const { users } = props.user;\r\n    if (users && Object.keys(users).length) {\r\n      const currentUser = Object.values(users).filter(user => (user.username === values.username && user.password === values.password));\r\n      // console.log(currentUser)\r\n      if (currentUser.length) {\r\n        // console.log(\"OK\")\r\n        const currUser = {...currentUser[0], isLogged: true};\r\n        console.log({currUser})\r\n        props.setCurrentUser(currUser);\r\n        // Redirect to ExamList\r\n       setRedirect(true);\r\n      } else {\r\n        setWrongMessage(\"***Your username or password is incorect!!!\")\r\n      }\r\n    } else {\r\n      // some error\r\n      console.log(\"user fetching error\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  if (redirect) return <Redirect to=\"/temprate/examlist\" />\r\n\r\n  return (\r\n    <div className=\"form-login\">\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{\r\n          remember: true,\r\n        }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your username!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <span style={{ color: 'red' }}>{wrongMessage}</span>\r\n        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n          <Checkbox>Remember me</Checkbox>\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllUser: () => {\r\n      dispatch(getAllUser())\r\n    },\r\n    setCurrentUser: (user) => {\r\n      dispatch(setCurrentUser(user))\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import { getAllUserFromFirebase } from '../../utils/firebase';\r\nimport { GET_ALL_USER, ADD_USER, SET_CURRENT_USER, GET_CURRENT_USER, REMOVE_CURENT_USER } from '../constants';\r\n\r\nexport const getAllUser = () => async (dispatch) => {\r\n  const allUser = await getAllUserFromFirebase();\r\n  if (allUser && Object.keys(allUser).length) {\r\n    Object.keys(allUser).forEach(key => {\r\n      allUser[key] = JSON.parse(allUser[key])\r\n    })\r\n  }\r\n  dispatch ({\r\n    type: GET_ALL_USER,\r\n    allUser,\r\n  })\r\n}\r\n\r\nexport const addUser = (user) => {\r\n  return {\r\n    type: ADD_USER,\r\n    user,\r\n  }\r\n}\r\n\r\nexport const setCurrentUser = currentUser => dispatch => {\r\n  dispatch ({\r\n    type: SET_CURRENT_USER,\r\n    currentUser,\r\n  })\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n  return {\r\n    type: GET_CURRENT_USER,\r\n  }\r\n}\r\n\r\nexport const removeCurrentUser = () => {\r\n  return {\r\n    type: REMOVE_CURENT_USER,\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { MIN_ANSWER_NUMBER, MAX_ANSWER_NUMBER } from \"../../constants\";\r\nimport { Drawer, Form, Button, Col, Row, Input, Select } from \"antd\";\r\n\r\nimport {\r\n  PlusSquareTwoTone,\r\n  DoubleLeftOutlined,\r\n  DoubleRightOutlined,\r\n  DeleteOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass DrawerForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      question: {\r\n        title: \"\",\r\n        content: \"\",\r\n        answers: Array(MIN_ANSWER_NUMBER),\r\n        correct: null,\r\n        explanation: \"\",\r\n      },\r\n      questions: [],\r\n      quesNo: 0,\r\n      mode: \"add\"\r\n    };\r\n  }\r\n\r\n  blankQuestion = {\r\n    title: \"\",\r\n    content: \"\",\r\n    answers: Array(MIN_ANSWER_NUMBER),\r\n    correct: 1,\r\n    explanation: \"\",\r\n  }\r\n\r\n  checkValidateQuestion = () => {\r\n    const { question } = this.state;\r\n    const { title, content, answers, correct } = question;\r\n    if (title === \"\" || content === \"\" || correct === null || answers.some(x => x === \"\")) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ \r\n      visible: this.props.show,\r\n      questions: (this.props.exam.questions && this.props.exam.questions.length) ? this.props.exam.questions : [],\r\n      question: (this.props.exam.questions && this.props.exam.questions.length) ? this.props.exam.questions[0] : this.blankQuestion,\r\n      mode: (this.props.isEdit) ? 'edit' : 'add',\r\n    });\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { question } = this.state;\r\n    const inputName = e.target ? e.target.name : null;\r\n    if (inputName !== null) { // Input text, text area field\r\n      const value = e.target.value;\r\n      if (inputName === \"title\" || inputName === \"content\" || inputName === \"explanation\") { // title, content, explanation\r\n        question[inputName] = value;\r\n      } else {  // answerX\r\n        const ansIndex = Number(inputName.slice(\"answer\".length));\r\n        question.answers[ansIndex] = value;\r\n      }\r\n      this.setState({ question });\r\n    } else { // Select field\r\n      question.correct = e;\r\n      this.setState({ question });\r\n    }\r\n  };\r\n\r\n  onClose = () => {\r\n    this.props.closeForm(\"cancel\");\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  doSaveAndClose = () => {\r\n    console.log(\"submit\");\r\n    this.setState({ visible: false });\r\n    const { quesNo, question, questions } = this.state;\r\n    if(!this.checkValidateQuestion()) {\r\n      this.props.closeForm(\"cancel\");\r\n      return;\r\n    }\r\n    questions[quesNo] = question;\r\n    this.setState({ questions });\r\n    this.props.closeForm(this.state.mode, questions);\r\n    return;\r\n  };\r\n\r\n  nextQuestion = () => {\r\n    // console.log(\"Next Question\");\r\n    let { quesNo, question, questions } = this.state;\r\n    quesNo += 1;\r\n    /*  */\r\n    if (questions[quesNo]){\r\n      console.log(\"EDIT EXISTING QUESTION\");\r\n      if (!this.checkValidateQuestion()) return;\r\n      questions[quesNo - 1] = question;\r\n      question = questions[quesNo];\r\n      this.setState({ quesNo, question, questions });\r\n    } else {\r\n      console.log(\"ADD NEW QUESTION\");\r\n      /* Check validate Input */\r\n      if (!this.checkValidateQuestion()) return;\r\n      questions.push(question);\r\n      question = {...this.blankQuestion, answers: Array(MIN_ANSWER_NUMBER)};\r\n      this.setState({ quesNo, question, questions });\r\n    }\r\n  };\r\n\r\n  prevQuestion = () => {\r\n    // console.log(\"Prev Question\");\r\n    let { quesNo, question, questions } = this.state;\r\n    if( quesNo > 0 ){\r\n      quesNo -= 1;\r\n      question = questions[quesNo]\r\n      this.setState({ quesNo, question, questions });\r\n    }\r\n  };\r\n\r\n  addAnswer = () => {\r\n    // console.log(\"Add new Answer\");\r\n    const { question } = this.state;\r\n    question.answers.length += 1;\r\n    this.setState({ question });\r\n  };\r\n\r\n  removeAnswer = (i) => {\r\n    // console.log(i)\r\n    const { question } = this.state;\r\n    if ( question.answers.length <= MIN_ANSWER_NUMBER ) return;\r\n    question.answers.splice(i, 1);\r\n    this.setState({ question });\r\n  }\r\n\r\n  render() {\r\n    const { question, quesNo, questions } = this.state;\r\n    console.log(\"current question --> \", question)\r\n    const { answers } = question;\r\n    let allAnswer = [];\r\n    const correctAns = [];\r\n    for (let i = 0; i < answers.length; i++) {\r\n      // console.log(answers[i])\r\n      allAnswer.push(\r\n        <>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                // name={`answer${i}`}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please enter answer content\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  style={{ width: \"100%\" }}\r\n                  addonBefore={`AnsNo.${i+1}`}\r\n                  placeholder={`Answer No.${i+1}`}\r\n                  name={`answer${i}`}\r\n                  onChange={this.onChange}    \r\n                  value={answers[i]}              \r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item name=\"delete\">\r\n                <Button type=\"danger\"  onClick={() => this.removeAnswer(i)}>\r\n                  <DeleteOutlined />\r\n                </Button>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      );\r\n      correctAns.push(\r\n        <>\r\n          <Option value={i+1}>{`Answer ${i+1}`}</Option>\r\n        </>\r\n      )\r\n    }\r\n\r\n    \r\n    return (\r\n      <div>\r\n        <Drawer\r\n          title={\r\n            <div>\r\n              {this.props.isEdit ? 'Edit ':'Create new '} Question:{\" \"}\r\n              <Button onClick={this.prevQuestion}>\r\n                <DoubleLeftOutlined />\r\n                Prev\r\n              </Button>\r\n              {` ${quesNo+1}/${questions.length} `}\r\n              <Button onClick={this.nextQuestion}>\r\n                Next\r\n                <DoubleRightOutlined />\r\n              </Button>\r\n              <span style={{float: 'right', marginRight: '20px'}}>{`  Current Exam: `} <strong style={{color: 'red'}}>{this.props.exam.title}</strong></span> \r\n            </div>\r\n          }\r\n          width={720}\r\n          onClose={this.onClose}\r\n          visible={this.state.visible}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={this.doSaveAndClose}\r\n          >\r\n            {/* Question Title */}\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item\r\n                  label=\"Question title\"\r\n                  rules={[\r\n                    { required: true, message: \"Please enter Question title\" },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    name=\"title\"\r\n                    onChange={this.onChange}\r\n                    placeholder=\"Please enter question title\"\r\n                    value={question.title}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            {/* End Question title */}\r\n            {/* Question Content */}\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item\r\n                  label=\"Quesion Content\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"please enter Question Content\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    placeholder=\"please enter Question Content\"\r\n                    name=\"content\"\r\n                    onChange={this.onChange}\r\n                    value={question.content}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            {/* End Question Content */}\r\n            Answer:\r\n            {allAnswer}\r\n            <hr />\r\n            {/* Answers */}\r\n            {/* End Answers */}\r\n            {/* Add new Answer Button */}\r\n            <Row gutter={16}>\r\n              <Col span={6}>\r\n                <Button type=\"dashed\" onClick={this.addAnswer}>\r\n                  <PlusSquareTwoTone />\r\n                  Add New Answer\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            {/* Correct Anwser */}\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item\r\n                  label=\"Correct Answer\"\r\n                  rules={[\r\n                    { required: true, message: \"Please choose correct answer\" },\r\n                  ]}\r\n                >\r\n                  <Select\r\n                    name=\"correct\"\r\n                    placeholder=\"Please choose the correct answer\"\r\n                    onChange={this.onChange}\r\n                    value={question.correct}\r\n                  >\r\n                    {correctAns}\r\n\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            {/* End correct Answer */}\r\n            {/* Question'answer Explanation */}\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item\r\n                  label=\"Question'answer Explanation\"\r\n                >\r\n                  <Input.TextArea\r\n                    rows={2}\r\n                    placeholder=\"Enter Question's answer Explanation\"\r\n                    name=\"explanation\"\r\n                    onChange={this.onChange}\r\n                    value={question.explanation}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            {/* End Question's Explanation */}\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Save And Close\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawerForm;\r\n","export const MIN_QUESTION_NUMBER = 1;\r\nexport const MAX_QUESTION_NUMBER = 100;\r\nexport const MIN_ANSWER_NUMBER = 2;\r\nexport const MAX_ANSWER_NUMBER = 10;\r\n\r\nexport const USER_TOKEN = \"user_token_0000\";\r\nexport const REFRESH_USER_TOKEN = \"refresh_user_token\";\r\nexport const BASE_URL = \"http://localhost:8888/api\";","import React, { Component, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAllExam } from \"../../store/action/exam-actions\";\r\nimport {\r\n  List,\r\n  Avatar,\r\n  Button,\r\n  Skeleton,\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  Typography,\r\n  Popconfirm,\r\n  message,\r\n} from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport QuestionForm from \"../questionform/QuestionForm\";\r\nimport {\r\n  addOneExamToFireBase,\r\n  updateExamWithKey,\r\n  removeExamWithKey,\r\n} from \"../../utils/firebase\";\r\nimport { EditTwoTone, DeleteOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport ButtonGroup from \"antd/lib/button/button-group\";\r\n\r\nconst { Option } = Select;\r\nconst { Paragraph } = Typography;\r\n\r\nconst allLevel = [\"N1\", \"N2\", \"N3\", \"N4\", \"N5\"];\r\nconst EDIT_EXAM_INFO = \"edit\";\r\nconst REMOVE_EXAM = \"remove\";\r\nconst EDIT_EXAM_QUESTIONS = \"questions\";\r\n\r\nfunction OneExam(props) {\r\n  const { examKey, exam, getEditContent, isAdmin } = props;\r\n  // console.log(examKey, exam)\r\n  const [examTitle, setExamTitle] = useState(\"\");\r\n  const [examDescription, setExamDescription] = useState(\"\");\r\n  const [examLevel, setExamLevel] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // console.log(\"re-render Item\")\r\n    setExamTitle(exam.title);\r\n    setExamDescription(exam.description);\r\n    setExamLevel(exam.level);\r\n  }, [props.exam]);\r\n\r\n  /* update exam info */\r\n\r\n  const callEdit = () => {\r\n    getEditContent(EDIT_EXAM_QUESTIONS, examKey, exam);\r\n  };\r\n  const doEdit = () => {\r\n    callEdit();\r\n  };\r\n  const doRemove = () => {\r\n    getEditContent(REMOVE_EXAM, examKey);\r\n  };\r\n\r\n  const onChangeLevel = (e) => {\r\n    setExamLevel(e);\r\n    getEditContent(EDIT_EXAM_INFO, examKey, { ...exam, level: e });\r\n  };\r\n\r\n  const onChangeTitle = (str) => {\r\n    setExamTitle(str);\r\n    getEditContent(EDIT_EXAM_INFO, examKey, { ...exam, title: str });\r\n  };\r\n\r\n  const onChangeDescription = (str) => {\r\n    setExamDescription(str);\r\n    getEditContent(EDIT_EXAM_INFO, examKey, { ...exam, description: str });\r\n  };\r\n\r\n  const linkClick = (e) => {\r\n    if (isAdmin) e.preventDefault();\r\n  };\r\n  const levelSelect = [\r\n    <Select\r\n      name=\"level\"\r\n      value={examLevel}\r\n      onChange={onChangeLevel}\r\n      disabled={!isAdmin}\r\n    >\r\n      {allLevel.map((l) => (\r\n        <Option key={l} value={l}>\r\n          {l}\r\n        </Option>\r\n      ))}\r\n    </Select>,\r\n  ];\r\n  return (\r\n    <>\r\n      <List.Item\r\n        actions={\r\n          isAdmin\r\n            ? [\r\n                <ButtonGroup key=\"001\">\r\n                  <Button type=\"dashed\" onClick={doEdit}>\r\n                    <EditTwoTone />\r\n                  </Button>\r\n\r\n                  <Popconfirm\r\n                    title=\"Are you sure delete this exam ?\"\r\n                    onConfirm={doRemove}\r\n                    okText=\"Delete\"\r\n                    cancelText=\"Cancel\"\r\n                  >\r\n                    <Button type=\"danger\">\r\n                      <DeleteOutlined />\r\n                    </Button>\r\n                  </Popconfirm>\r\n                </ButtonGroup>,\r\n              ]\r\n            : null\r\n        }\r\n      >\r\n        <Skeleton avatar title={false} loading={false} active key={examKey}>\r\n          <List.Item.Meta\r\n            avatar={\r\n              <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\r\n            }\r\n            title={\r\n              <Link to={`/temprate/do-test/${examKey}`} onClick={linkClick}>\r\n                <strong>\r\n                  <Paragraph\r\n                    editable={isAdmin ? { onChange: onChangeTitle } : false}\r\n                  >\r\n                    {examTitle}\r\n                  </Paragraph>\r\n                </strong>\r\n              </Link>\r\n            }\r\n            description={[\r\n              <p key=\"1\">\r\n                <Paragraph\r\n                  editable={isAdmin ? { onChange: onChangeDescription } : false}\r\n                >\r\n                  {examDescription}\r\n                </Paragraph>\r\n              </p>,\r\n              <span key=\"2\">Level: {levelSelect}</span>,\r\n            ]}\r\n          />\r\n        </Skeleton>\r\n      </List.Item>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction FormNewExam(props) {\r\n  let { show, onClose } = props;\r\n  const [visible, setVisible] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [level, setLevel] = useState(\"\");\r\n  useEffect(() => {\r\n    setVisible(show);\r\n  }, []);\r\n\r\n  const handleCancel = () => {\r\n    console.log(\"Cancel Click\");\r\n    onClose();\r\n    setVisible(false);\r\n  };\r\n  const onChange = (e) => {\r\n    if (e.target) {\r\n      console.log(e.target.name);\r\n      if (e.target.name === \"title\") setTitle(e.target.value);\r\n      else setDescription(e.target.value);\r\n    } else {\r\n      console.log(e);\r\n      setLevel(e);\r\n    }\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    // console.log(\"submit new exam-> \", title, description, level);\r\n    onClose(title, description, level);\r\n    setVisible(false);\r\n  };\r\n\r\n  const levelOptions = allLevel.map((l) => <Option value={l}>{l}</Option>);\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Create New Exam\" visible={visible} onCancel={handleCancel}>\r\n        <Form onFinish={onSubmit}>\r\n          <Form.Item\r\n            name=\"title\"\r\n            label=\"Exam Title\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input exam title\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Exam title\" name=\"title\" onChange={onChange} />\r\n          </Form.Item>\r\n          {/*  */}\r\n          <Form.Item\r\n            name=\"description\"\r\n            label=\"Exam Desciption\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input exam description\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input.TextArea\r\n              rows={4}\r\n              name=\"description\"\r\n              placeholder=\"Exam description\"\r\n              onChange={onChange}\r\n            />\r\n          </Form.Item>\r\n          {/*  */}\r\n          <Form.Item\r\n            name=\"rank\"\r\n            label=\"Select level\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select level of exam\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select Level of Exam\" onChange={onChange}>\r\n              {levelOptions}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ width: \"100%\" }}>\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\n/* Create Context to pass state to child component */\r\nconst CurrentUserContext = React.createContext(null);\r\n\r\nclass ExamList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initLoading: true,\r\n      data: {},\r\n      showQuestionForm: false,\r\n      showNewExamForm: false,\r\n      exam: {\r\n        title: \"\",\r\n        description: \"\",\r\n        level: \"\",\r\n        questions: [],\r\n      },\r\n      examKey: \"\",\r\n      isEdit: false,\r\n    };\r\n  }\r\n\r\n  /* Set Context to this class */\r\n  static contextType = CurrentUserContext;\r\n\r\n  componentDidMount() {\r\n    this.props.getAllExam();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.exam !== this.props.exam) {\r\n      this.setState({ data: this.props.exam.exam, initLoading: false });\r\n    }\r\n  }\r\n\r\n  addNewExam = () => {\r\n    this.setState({ showNewExamForm: true });\r\n  };\r\n\r\n  onCloseFormQuestion = (mode, questions) => {\r\n    this.setState({ showQuestionForm: false });\r\n    if (mode === \"cancel\") return;\r\n    // save questions into exam and store in firebase\r\n    // console.log(questions)\r\n    const { exam } = this.state;\r\n    exam.questions = questions;\r\n    this.setState({ exam });\r\n\r\n    if (mode === \"add\") {\r\n      // connect to fire base\r\n      addOneExamToFireBase(exam).then((res) => {\r\n        // console.log(res.key)\r\n        const { data } = this.state;\r\n        data[res.key] = exam;\r\n        this.setState({ data });\r\n      });\r\n    } else if (mode === \"edit\") {\r\n      const { examKey } = this.state;\r\n      updateExamWithKey(examKey, exam).then((res) => {\r\n        message.success(\"update Question OK\");\r\n      });\r\n    }\r\n  };\r\n\r\n  onNewExamClose = (title, description, level) => {\r\n    console.log({ title, description, level });\r\n    this.setState({ showNewExamForm: false });\r\n    if (\r\n      title !== undefined &&\r\n      description !== undefined &&\r\n      level !== undefined\r\n    ) {\r\n      const { exam } = this.state;\r\n      exam.title = title;\r\n      exam.description = description;\r\n      exam.level = level;\r\n      // create new exam\r\n      this.setState({ exam, showQuestionForm: true, isEdit: false });\r\n    }\r\n    return;\r\n  };\r\n\r\n  /* get comnand from edit or delete button */\r\n  getEditContent = (mode, examKey, editedExam) => {\r\n    const { data } = this.state;\r\n    // console.log(mode);\r\n    switch (mode) {\r\n      /* edit exam info: title, description, level */\r\n      case EDIT_EXAM_INFO:\r\n        // console.log({ examKey, editedExam });\r\n        updateExamWithKey(examKey, editedExam).then(() => {\r\n          // update state do re-render views\r\n          data[examKey] = editedExam;\r\n          this.setState({ data });\r\n          message.info(\"Exam updated\")\r\n        });\r\n        break;\r\n      /* Remove this exam */\r\n      case REMOVE_EXAM:\r\n        // console.log({examKey});\r\n        removeExamWithKey(examKey).then(() => {\r\n          // update state to re-render views\r\n          delete data[examKey];\r\n          this.setState({ data });\r\n          message.success(\"Exam deletted\");\r\n        });\r\n        break;\r\n      /* Open question form to edit all question of exam */\r\n      case EDIT_EXAM_QUESTIONS:\r\n        this.setState({\r\n          exam: data[examKey],\r\n          showQuestionForm: true,\r\n          examKey,\r\n          isEdit: true,\r\n        });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      initLoading,\r\n      data,\r\n      showQuestionForm,\r\n      showNewExamForm,\r\n      exam,\r\n      isEdit,\r\n    } = this.state;\r\n    // console.log(\"data- - - >>> \", data);\r\n    const { currentUser } = this.props.user;\r\n    const isAdmin = currentUser && currentUser.isAdmin && currentUser.isLogged;\r\n    const examItem =\r\n      data && Object.keys(data).length\r\n        ? Object.keys(data)\r\n            .reverse()\r\n            .map((examKey) => (\r\n              <OneExam\r\n                key={examKey}\r\n                examKey={examKey}\r\n                exam={data[examKey]}\r\n                getEditContent={this.getEditContent}\r\n                isAdmin={isAdmin}\r\n              />\r\n            ))\r\n        : null;\r\n\r\n    const questionForm = showQuestionForm ? (\r\n      <QuestionForm\r\n        show={true}\r\n        exam={exam}\r\n        closeForm={this.onCloseFormQuestion}\r\n        isEdit={isEdit}\r\n      />\r\n    ) : null;\r\n\r\n    const newExam = showNewExamForm ? (\r\n      <FormNewExam show={showNewExamForm} onClose={this.onNewExamClose} />\r\n    ) : null;\r\n\r\n    return (\r\n      <CurrentUserContext.Provider state={this.props.user.currentUser}>\r\n        {newExam}\r\n        <List\r\n          className=\"demo-loadmore-list\"\r\n          loading={initLoading}\r\n          itemLayout=\"horizontal\"\r\n        >\r\n          {examItem}\r\n        </List>\r\n        {questionForm}\r\n        <hr />\r\n        {isAdmin ? (\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n              marginTop: 12,\r\n              height: 32,\r\n              lineHeight: \"32px\",\r\n            }}\r\n          >\r\n            <Button type=\"primary\" onClick={this.addNewExam}>\r\n              <PlusOutlined />\r\n              Add New Exam\r\n            </Button>\r\n          </div>\r\n        ) : null}\r\n      </CurrentUserContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exam: state.exam,\r\n    user: state.user,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllExam: () => {\r\n      dispatch(getAllExam());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExamList);\r\n","import { getAllExamFromFirebase } from \"../../utils/firebase\";\r\nimport { GET_ALL_EXAM, FETCH_EXAM_ERROR, ADD_NEW_QUESTION } from \"../constants\";\r\n\r\nexport const getAllExam = () => async dispatch => {\r\n    const allExam = await getAllExamFromFirebase();\r\n    if (allExam && Object.keys(allExam).length) {\r\n        Object.keys(allExam).forEach(key => {\r\n            allExam[key] = JSON.parse(allExam[key]);\r\n        });\r\n    }\r\n    dispatch ({\r\n        type: GET_ALL_EXAM,\r\n        allExam,\r\n    })\r\n};\r\n\r\nexport const addOneQuestionToNewExam = (oneQuestion) => {\r\n    return {\r\n        type: ADD_NEW_QUESTION,\r\n        oneQuestion,\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { PageHeader, Button, Typography, Badge, Row, Col, Dropdown, Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DownOutlined, UserOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nimport './AppHeader.css';\r\n\r\nconst { Text } = Typography;\r\n\r\nfunction AppHeader(props) {\r\n  const { user } = props;\r\n  const { currentUser } = user;\r\n\r\n  // console.log(\"AppHeader \", currentUser) -> OK\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item>\r\n        <Link to=\"/temprate/logout\">Logout</Link>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const userInfo = (\r\n    <Dropdown overlay={menu}>\r\n      <Text type=\"secondary\" mark code>\r\n        Helo {currentUser.username} <DownOutlined />\r\n      </Text>\r\n    </Dropdown>\r\n  )\r\n\r\n  const loginBtn = (currentUser && currentUser.isLogged) ? userInfo : (<Button key=\"1\" type=\"primary\">\r\n  <Link to=\"/temprate/login\"><UserOutlined /> Login</Link>\r\n  </Button>);\r\n  return (\r\n    <div className=\"AppHeader\">\r\n          <PageHeader\r\n            className=\"site-page-header\"\r\n            onBack={() => window.history.back()}\r\n            title={<Link to=\"/temprate\">Test Online</Link>}\r\n            subTitle=\"phiên bản dùng thử\"\r\n          >\r\n            <Row>\r\n              <Col>\r\n                <Button.Group className=\"btn-group\">\r\n                <Button key=\"3\"><Link to=\"/temprate/examlist\"><OrderedListOutlined />List Of Exam</Link></Button>\r\n                {/* <Button key=\"2\"><Link to=\"/signup\"><UserAddOutlined />Signup</Link></Button> */}\r\n                {loginBtn}\r\n                </Button.Group>\r\n              </Col>\r\n              <Col>\r\n              </Col>\r\n            </Row>      \r\n          </PageHeader>          \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AppHeader);\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Radio, Card, Button, Pagination, Modal, Typography } from \"antd\";\r\nimport \"./DoTest.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\r\nimport { getExamByID } from '../../utils/firebase';\r\n\r\nfunction OneQuestion(props) {\r\n  const { question, quesNo, checkResult, getAnswer, selected } = props;\r\n  const { title, content, answers, correct, explanation } = question;\r\n  const [checkedValue, setCheckedValue] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    if (selected) setCheckedValue(selected);\r\n  }, [])\r\n\r\n  const onChange = (e) => {\r\n    // console.log(\"Radio \", e.target.value);\r\n    // send selected answer to parent\r\n    setCheckedValue(e.target.value);\r\n    // console.log({checkedValue, correct})\r\n    getAnswer(quesNo, e.target.value === correct, e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Question Title */}\r\n      <Card\r\n        title={\r\n          <span style={!checkedValue && checkResult ? { color: \"red\" } : null}>\r\n            Question {quesNo + 1}: {title}\r\n          </span>\r\n        }\r\n        className=\"oneQuestion\"\r\n      >\r\n        {/* Question Content */}\r\n        <p>\r\n          <strong>{content}</strong>\r\n        </p>\r\n        {/* Question Answers */}\r\n        Select your answer:\r\n        <br />\r\n        <Radio.Group name=\"answer\" onChange={onChange} className=\"answer\" value={selected}>\r\n          {!!answers &&\r\n            answers.map((answer, no) => {\r\n              // console.log(checkedValue, no+1, correct, typeof checkedValue, typeof no+1, typeof correct)\r\n              if (\r\n                checkResult &&\r\n                checkedValue === no + 1 &&\r\n                checkedValue === correct\r\n              ) {\r\n                return (\r\n                  <Radio value={no + 1} key={no} className=\"radio\">\r\n                    {answer}\r\n                    <CheckOutlined className=\"true-answer\" />{\" \"}\r\n                  </Radio>\r\n                );\r\n              } else if (\r\n                checkResult &&\r\n                checkedValue === no + 1 &&\r\n                checkedValue !== correct\r\n              ) {\r\n                return (\r\n                  <Radio value={no + 1} key={no} className=\"radio\">\r\n                    {answer}\r\n                    <CloseOutlined className=\"false-answer\" />{\" \"}\r\n                  </Radio>\r\n                );\r\n              }\r\n\r\n              return (\r\n                <Radio value={no + 1} key={no} className=\"radio\">\r\n                  {answer}\r\n                </Radio>\r\n              );\r\n            })}\r\n        </Radio.Group>\r\n        {/* Question's Answer Explanation */}\r\n        {checkResult ? <p style={{ color: \"red\" }}>{explanation}</p> : null}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DoTest(props) {\r\n\r\n  useEffect(() => {\r\n    // Check Current Exam is setted\r\n    if (exam[examID]) {\r\n      setCurrentExam(exam[examID]);\r\n    } else {\r\n      getExamByID(examID).then(data => {\r\n        setCurrentExam(JSON.parse(data));\r\n      });\r\n    }    \r\n  }, []);\r\n\r\n  const { exam } = props.exam;\r\n  const { examID } = useParams();\r\n  const [isDoScore, setIsDoScore] = useState(false);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [score, setScore] = useState('');\r\n  const [currentExam, setCurrentExam] = useState({});\r\n  const [dispQuestion, setDispQuestion] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [scored, setScored] = useState([]);\r\n\r\n  /* exam object is {\r\n    title: \"EXAM TITLE\",\r\n    description: \"EXAM DESCRIPTION\",\r\n    type: \"EXAM TYPE\" -> N1~N5\r\n    questions: [array of questions]\r\n  } */\r\n\r\n  const { questions } = currentExam ? currentExam : { questions: [] };\r\n  // show 10 question on a page\r\n  const initDispQues = (questions && questions.length >= 10) ? questions.slice(0, 10) : questions;\r\n  // setDispQuestion(dispQues)\r\n  \r\n  /* One Question Object is -> {\r\n    title: \"Question title\",\r\n    content: \"Question content\",\r\n    answers: [Array of answers],\r\n    correct: correct answer,\r\n    explanation: \"Question's answer explanation\"\r\n  } */\r\n\r\n  const getAnswer = (quesNo, ans, selected) => {\r\n    const buffAns = [...answers];\r\n    buffAns[quesNo] = selected;\r\n    setAnswers(buffAns)\r\n    const buffScored = scored;\r\n    buffScored[quesNo] = ans;\r\n    setScored(buffScored);\r\n  };\r\n\r\n  const doScore = () => {\r\n    // console.log(\"doScore\");\r\n    setIsDoScore(true);\r\n    const trueAns = scored.filter(Boolean).length;\r\n    const score = `${trueAns} / ${questions.length}`;\r\n    setShowScore(true);\r\n    setScore(score)\r\n  };\r\n\r\n  /* Pagination's change event */\r\n  const changePage = (page, pageSize) => {\r\n    const quesLen = questions ? questions.length : 0;\r\n    if (quesLen === 0) return;\r\n    console.log({ page, pageSize });\r\n    let dispQues;\r\n    if (quesLen > page * pageSize) {\r\n      dispQues = questions.slice((page * pageSize) - pageSize, page * pageSize);\r\n    } else {\r\n      dispQues = questions.slice((page * pageSize) - pageSize);\r\n    }\r\n    console.log({dispQues});\r\n    setDispQuestion(dispQues);\r\n    setPage(page);\r\n  };\r\n\r\n  const changePageSize = (page, size) => {\r\n    console.log({ page, size });\r\n  };\r\n\r\n  /* caculate total Question */\r\n\r\n  const tempQuestions = (dispQuestion && dispQuestion.length) ? dispQuestion : initDispQues; \r\n  // console.log({currentExam})\r\n  return (\r\n    <>\r\n      {tempQuestions &&\r\n        tempQuestions.map((question, k) => (\r\n          <OneQuestion\r\n            quesNo={k + (page - 1) * 10}\r\n            key={k}\r\n            question={question}\r\n            getAnswer={getAnswer}\r\n            checkResult={isDoScore}\r\n            selected={answers[k + (page - 1) * 10] ? answers[k + (page - 1) * 10] : null}\r\n          />\r\n        ))}\r\n\r\n      {/* Pagination */}\r\n      <div style={{ marginTop: \"10px\", textAlign: \"center\" }}>\r\n        <Pagination\r\n          total={questions ? questions.length : 0}\r\n          // showQuickJumper\r\n          onChange={changePage}\r\n          onShowSizeChange={changePageSize}\r\n          showTotal={(total) => `Total ${total} items`}\r\n        />\r\n      </div>\r\n\r\n      <Button\r\n        type=\"primary\"\r\n        size=\"large\"\r\n        onClick={doScore}\r\n        style={{ margin: \"20px auto\", width: \"100%\" }}\r\n      >\r\n        Score\r\n      </Button>\r\n      {/* show Score Modal */}\r\n      <Modal\r\n          title=\"Test Result\"\r\n          visible={showScore}\r\n          onOk={() => setShowScore(false)}\r\n          onCancel={() => setShowScore(false)}\r\n        >\r\n          <p style={{textAlign: 'center'}}><strong>You pass --> <Typography.Text mark code>{score}</Typography.Text></strong></p>\r\n        </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exam: state.exam,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(DoTest);\r\n","import React from 'react';\r\nimport { Button, Result } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <Result\r\n      title=\"404\"\r\n      status=\"404\"\r\n      subTitle=\"Not Found\"\r\n      extra={<Button type=\"primary\"><Link to=\"/temprate/\">Back Home</Link></Button>}\r\n      />\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Spin } from 'antd';\r\nimport { removeCurrentUser } from '../../store/action/user-actions';\r\n\r\nconst Logout = (props) => {\r\n  const [redirect, setRedirect] = useState(false);  \r\n  useEffect(() => {\r\n    props.setLogout();\r\n    setRedirect(true);\r\n  }, [props]);\r\n\r\n  if (redirect) return <Redirect to=\"/temprate/\" from=\"/logout\"/>\r\n\r\n  return (\r\n    <div style={{textAlign: 'center', marginTop: '50px'}}>\r\n      Logging out\r\n      <Spin />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setLogout: () => {\r\n      dispatch(removeCurrentUser())\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);","import React, { useEffect } from \"react\";\n// import logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  withRouter,\n  Link,\n} from \"react-router-dom\";\nimport Login from \"../user/Login\";\n\nimport \"./App.css\";\nimport ExamList from \"../examlist/ExamList\";\nimport { Result, Button } from \"antd\";\nimport AppHeader from \"../common/AppHeader\";\nimport DoTest from \"../dotest/DoTest\";\nimport NotFound from \"../common/NotFound\";\n// const { Header, Content, Footer } = Layout;\n// import { getAllUser } from '../../utils/axios';\nimport Logout from \"../user/Logout\";\nimport { SmileOutlined } from \"@ant-design/icons\";\n\nfunction App() {\n  // useEffect(() => {\n  //   // test server\n  //   getAllUser().then(response => {\n  //     console.log(\"From server \", response);\n  //   })\n\n  // }, []); \n\n  return (\n    <Router>\n      <div className=\"App\">\n        <AppHeader />\n        <Switch>\n          <Route exact path=\"/temprate\">\n            <Result\n              icon={<SmileOutlined />}\n              title=\"Welcome to me\"\n              extra={<Button type=\"primary\"><Link to=\"/temprate/examlist\">Go To Exam</Link></Button>}\n            />\n          </Route>\n          {/* <Route path=\"/temprate/:subRoute\" component={SubRoute}/> */}\n          <Route path=\"/temprate/do-test/:examID\" component={DoTest} />\n          <Route path=\"/temprate/login\" component={Login} />\n          <Route path=\"/temprate/examlist\" component={ExamList} />      \n          <Route path=\"/temprate/logout\" component={Logout} />    \n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  ADD_EXAM,\r\n  REMOVE_EXAM,\r\n  GET_ALL_EXAM,\r\n  FETCHING_EXAM,\r\n  FETCH_EXAM_ERROR,\r\n  ADD_NEW_QUESTION,\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n  exam: {},\r\n  currentExam: {},\r\n  isFetching: false,\r\n  error: false,\r\n};\r\n\r\nexport default function exam_reducers(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCHING_EXAM:\r\n      return { ...state, isFetching: true };\r\n\r\n    case GET_ALL_EXAM:\r\n      return { ...state, exam: action.allExam };\r\n\r\n    case FETCH_EXAM_ERROR:\r\n      return { ...state, error: true };\r\n\r\n    case ADD_EXAM:\r\n      return state;\r\n\r\n    case REMOVE_EXAM:\r\n      return state;\r\n\r\n    // Add new question \r\n    case ADD_NEW_QUESTION:\r\n      const currentQuestions = state.currentExam.questions;\r\n      currentQuestions.push(action.oneQuestion)\r\n      return {...state, currentExam: {...state.currentExam, questions: currentQuestions}}; \r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ADD_USER, GET_ALL_USER, SET_CURRENT_USER, REMOVE_CURENT_USER } from \"../constants\";\r\n\r\nconst nameInitialState = {\r\n  users: {},\r\n  currentUser: {\r\n    username: \"\",\r\n    password: \"\",\r\n    isAdmin: false,\r\n    isLogged: false,\r\n  },\r\n};\r\nconst user_reducer = (state = nameInitialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_USER:\r\n      return state;\r\n\r\n    case GET_ALL_USER:\r\n      return {...state, users: action.allUser};\r\n\r\n    case SET_CURRENT_USER:\r\n      return {...state, currentUser: action.currentUser};\r\n    \r\n    case REMOVE_CURENT_USER:\r\n      return {...state, currentUser: {username: \"\", password: \"\", isLogged: false, isAdmin: false}} \r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default user_reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport examReducer from \"./exam-reducers\";\r\nimport userReducer from \"./user-reducers\";\r\n\r\nexport default combineReducers({\r\n  exam: examReducer,\r\n  user: userReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport appReducer from \"./reducer\";\r\n\r\nexport default createStore(appReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// import { withRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}